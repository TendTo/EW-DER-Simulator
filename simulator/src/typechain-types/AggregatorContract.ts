/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IAggregatorContract {
  export type AgreementStruct = {
    value: PromiseOrValue<BigNumberish>;
    flexibility: PromiseOrValue<BigNumberish>;
    valuePrice: PromiseOrValue<BigNumberish>;
    flexibilityPrice: PromiseOrValue<BigNumberish>;
    energySource: PromiseOrValue<BigNumberish>;
  };

  export type AgreementStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    value: BigNumber;
    flexibility: BigNumber;
    valuePrice: BigNumber;
    flexibilityPrice: BigNumber;
    energySource: number;
  };
}

export interface AggregatorContractInterface extends utils.Interface {
  functions: {
    "aggregator()": FunctionFragment;
    "agreements(address)": FunctionFragment;
    "cancelAgreement()": FunctionFragment;
    "energyBalance()": FunctionFragment;
    "flexibilityRequest()": FunctionFragment;
    "pendingRewards(uint256)": FunctionFragment;
    "prosumers(address)": FunctionFragment;
    "provideFlexibility(int256)": FunctionFragment;
    "registerAgreement((int256,int256,int256,int256,uint8))": FunctionFragment;
    "requestFlexibility(int256,uint8)": FunctionFragment;
    "reviseAgreement((int256,int256,int256,int256,uint8))": FunctionFragment;
    "rewardFlexibility()": FunctionFragment;
    "rewardProduction()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregator"
      | "agreements"
      | "cancelAgreement"
      | "energyBalance"
      | "flexibilityRequest"
      | "pendingRewards"
      | "prosumers"
      | "provideFlexibility"
      | "registerAgreement"
      | "requestFlexibility"
      | "reviseAgreement"
      | "rewardFlexibility"
      | "rewardProduction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAgreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "energyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flexibilityRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "prosumers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "provideFlexibility",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgreement",
    values: [IAggregatorContract.AgreementStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFlexibility",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviseAgreement",
    values: [IAggregatorContract.AgreementStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardFlexibility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardProduction",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "energyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flexibilityRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prosumers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideFlexibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFlexibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviseAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardFlexibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardProduction",
    data: BytesLike
  ): Result;

  events: {
    "CancelAgreement(address,tuple)": EventFragment;
    "ProvideFlexibility(address,int256,uint256)": EventFragment;
    "RegisterAgreement(address,tuple)": EventFragment;
    "RequestFlexibility(int256,uint256,uint8)": EventFragment;
    "ReviseAgreement(address,tuple,tuple)": EventFragment;
    "RewardFlexibility(address,int256,uint256)": EventFragment;
    "RewardValue(address,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelAgreement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvideFlexibility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterAgreement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFlexibility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviseAgreement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardFlexibility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardValue"): EventFragment;
}

export interface CancelAgreementEventObject {
  prosumer: string;
  agreement: IAggregatorContract.AgreementStructOutput;
}
export type CancelAgreementEvent = TypedEvent<
  [string, IAggregatorContract.AgreementStructOutput],
  CancelAgreementEventObject
>;

export type CancelAgreementEventFilter = TypedEventFilter<CancelAgreementEvent>;

export interface ProvideFlexibilityEventObject {
  prosumer: string;
  flexibility: BigNumber;
  timestamp: BigNumber;
}
export type ProvideFlexibilityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ProvideFlexibilityEventObject
>;

export type ProvideFlexibilityEventFilter =
  TypedEventFilter<ProvideFlexibilityEvent>;

export interface RegisterAgreementEventObject {
  prosumer: string;
  agreement: IAggregatorContract.AgreementStructOutput;
}
export type RegisterAgreementEvent = TypedEvent<
  [string, IAggregatorContract.AgreementStructOutput],
  RegisterAgreementEventObject
>;

export type RegisterAgreementEventFilter =
  TypedEventFilter<RegisterAgreementEvent>;

export interface RequestFlexibilityEventObject {
  flexibility: BigNumber;
  timestamp: BigNumber;
  duration: number;
}
export type RequestFlexibilityEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  RequestFlexibilityEventObject
>;

export type RequestFlexibilityEventFilter =
  TypedEventFilter<RequestFlexibilityEvent>;

export interface ReviseAgreementEventObject {
  prosumer: string;
  oldAgreement: IAggregatorContract.AgreementStructOutput;
  newAgreement: IAggregatorContract.AgreementStructOutput;
}
export type ReviseAgreementEvent = TypedEvent<
  [
    string,
    IAggregatorContract.AgreementStructOutput,
    IAggregatorContract.AgreementStructOutput
  ],
  ReviseAgreementEventObject
>;

export type ReviseAgreementEventFilter = TypedEventFilter<ReviseAgreementEvent>;

export interface RewardFlexibilityEventObject {
  prosumer: string;
  reward: BigNumber;
  timestamp: BigNumber;
}
export type RewardFlexibilityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardFlexibilityEventObject
>;

export type RewardFlexibilityEventFilter =
  TypedEventFilter<RewardFlexibilityEvent>;

export interface RewardValueEventObject {
  prosumer: string;
  reward: BigNumber;
  timestamp: BigNumber;
}
export type RewardValueEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardValueEventObject
>;

export type RewardValueEventFilter = TypedEventFilter<RewardValueEvent>;

export interface AggregatorContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AggregatorContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregator(overrides?: CallOverrides): Promise<[string]>;

    agreements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        value: BigNumber;
        flexibility: BigNumber;
        valuePrice: BigNumber;
        flexibilityPrice: BigNumber;
        energySource: number;
      }
    >;

    cancelAgreement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    energyBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    flexibilityRequest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        flexibility: BigNumber;
        timestamp: BigNumber;
        duration: BigNumber;
      }
    >;

    pendingRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { prosumer: string; reward: BigNumber }>;

    prosumers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        balance: BigNumber;
        reputation: number;
        idx: BigNumber;
      }
    >;

    provideFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviseAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardFlexibility(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardProduction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aggregator(overrides?: CallOverrides): Promise<string>;

  agreements(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      value: BigNumber;
      flexibility: BigNumber;
      valuePrice: BigNumber;
      flexibilityPrice: BigNumber;
      energySource: number;
    }
  >;

  cancelAgreement(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  energyBalance(overrides?: CallOverrides): Promise<BigNumber>;

  flexibilityRequest(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      flexibility: BigNumber;
      timestamp: BigNumber;
      duration: BigNumber;
    }
  >;

  pendingRewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { prosumer: string; reward: BigNumber }>;

  prosumers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      balance: BigNumber;
      reputation: number;
      idx: BigNumber;
    }
  >;

  provideFlexibility(
    _flexibility: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAgreement(
    _agreement: IAggregatorContract.AgreementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestFlexibility(
    _flexibility: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviseAgreement(
    _agreement: IAggregatorContract.AgreementStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardFlexibility(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardProduction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aggregator(overrides?: CallOverrides): Promise<string>;

    agreements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        value: BigNumber;
        flexibility: BigNumber;
        valuePrice: BigNumber;
        flexibilityPrice: BigNumber;
        energySource: number;
      }
    >;

    cancelAgreement(overrides?: CallOverrides): Promise<void>;

    energyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    flexibilityRequest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        flexibility: BigNumber;
        timestamp: BigNumber;
        duration: BigNumber;
      }
    >;

    pendingRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { prosumer: string; reward: BigNumber }>;

    prosumers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        balance: BigNumber;
        reputation: number;
        idx: BigNumber;
      }
    >;

    provideFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    requestFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviseAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardFlexibility(overrides?: CallOverrides): Promise<void>;

    rewardProduction(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CancelAgreement(address,tuple)"(
      prosumer?: PromiseOrValue<string> | null,
      agreement?: null
    ): CancelAgreementEventFilter;
    CancelAgreement(
      prosumer?: PromiseOrValue<string> | null,
      agreement?: null
    ): CancelAgreementEventFilter;

    "ProvideFlexibility(address,int256,uint256)"(
      prosumer?: PromiseOrValue<string> | null,
      flexibility?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): ProvideFlexibilityEventFilter;
    ProvideFlexibility(
      prosumer?: PromiseOrValue<string> | null,
      flexibility?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): ProvideFlexibilityEventFilter;

    "RegisterAgreement(address,tuple)"(
      prosumer?: PromiseOrValue<string> | null,
      agreement?: null
    ): RegisterAgreementEventFilter;
    RegisterAgreement(
      prosumer?: PromiseOrValue<string> | null,
      agreement?: null
    ): RegisterAgreementEventFilter;

    "RequestFlexibility(int256,uint256,uint8)"(
      flexibility?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      duration?: null
    ): RequestFlexibilityEventFilter;
    RequestFlexibility(
      flexibility?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      duration?: null
    ): RequestFlexibilityEventFilter;

    "ReviseAgreement(address,tuple,tuple)"(
      prosumer?: PromiseOrValue<string> | null,
      oldAgreement?: null,
      newAgreement?: null
    ): ReviseAgreementEventFilter;
    ReviseAgreement(
      prosumer?: PromiseOrValue<string> | null,
      oldAgreement?: null,
      newAgreement?: null
    ): ReviseAgreementEventFilter;

    "RewardFlexibility(address,int256,uint256)"(
      prosumer?: PromiseOrValue<string> | null,
      reward?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): RewardFlexibilityEventFilter;
    RewardFlexibility(
      prosumer?: PromiseOrValue<string> | null,
      reward?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): RewardFlexibilityEventFilter;

    "RewardValue(address,int256,uint256)"(
      prosumer?: PromiseOrValue<string> | null,
      reward?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): RewardValueEventFilter;
    RewardValue(
      prosumer?: PromiseOrValue<string> | null,
      reward?: null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): RewardValueEventFilter;
  };

  estimateGas: {
    aggregator(overrides?: CallOverrides): Promise<BigNumber>;

    agreements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAgreement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    energyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    flexibilityRequest(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prosumers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviseAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardFlexibility(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardProduction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agreements(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAgreement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    energyBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flexibilityRequest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prosumers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestFlexibility(
      _flexibility: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviseAgreement(
      _agreement: IAggregatorContract.AgreementStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardFlexibility(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardProduction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
