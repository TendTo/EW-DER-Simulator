/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAggregatorContract,
  IAggregatorContractInterface,
} from "../IAggregatorContract";

const _abi = [
  {
    inputs: [],
    name: "AgreementAlreadyExistsError",
    type: "error",
  },
  {
    inputs: [],
    name: "AgreementDoesNotExistsError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "expected",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "actual",
        type: "int256",
      },
    ],
    name: "FlexibilityError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "a",
        type: "address",
      },
    ],
    name: "UnauthorizedAggregatorError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "valueName",
        type: "string",
      },
    ],
    name: "ZeroValueError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prosumer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibility",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "valuePrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibilityPrice",
            type: "int256",
          },
          {
            internalType: "enum IAggregatorContract.EnergySource",
            name: "energySource",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct IAggregatorContract.Agreement",
        name: "agreement",
        type: "tuple",
      },
    ],
    name: "CancelAgreement",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prosumer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "flexibility",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ProvideFlexibility",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prosumer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibility",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "valuePrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibilityPrice",
            type: "int256",
          },
          {
            internalType: "enum IAggregatorContract.EnergySource",
            name: "energySource",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct IAggregatorContract.Agreement",
        name: "agreement",
        type: "tuple",
      },
    ],
    name: "RegisterAgreement",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int256",
        name: "flexibility",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "duration",
        type: "uint8",
      },
    ],
    name: "RequestFlexibility",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prosumer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibility",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "valuePrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibilityPrice",
            type: "int256",
          },
          {
            internalType: "enum IAggregatorContract.EnergySource",
            name: "energySource",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct IAggregatorContract.Agreement",
        name: "oldAgreement",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibility",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "valuePrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibilityPrice",
            type: "int256",
          },
          {
            internalType: "enum IAggregatorContract.EnergySource",
            name: "energySource",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct IAggregatorContract.Agreement",
        name: "newAgreement",
        type: "tuple",
      },
    ],
    name: "ReviseAgreement",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prosumer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "reward",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "RewardFlexibility",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prosumer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "reward",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "RewardValue",
    type: "event",
  },
  {
    inputs: [],
    name: "cancelAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_flexibility",
        type: "int256",
      },
    ],
    name: "provideFlexibility",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibility",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "valuePrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibilityPrice",
            type: "int256",
          },
          {
            internalType: "enum IAggregatorContract.EnergySource",
            name: "energySource",
            type: "uint8",
          },
        ],
        internalType: "struct IAggregatorContract.Agreement",
        name: "_agreement",
        type: "tuple",
      },
    ],
    name: "registerAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_flexibility",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "_duration",
        type: "uint8",
      },
    ],
    name: "requestFlexibility",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibility",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "valuePrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "flexibilityPrice",
            type: "int256",
          },
          {
            internalType: "enum IAggregatorContract.EnergySource",
            name: "energySource",
            type: "uint8",
          },
        ],
        internalType: "struct IAggregatorContract.Agreement",
        name: "_agreement",
        type: "tuple",
      },
    ],
    name: "reviseAgreement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardFlexibility",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardProduction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IAggregatorContract__factory {
  static readonly abi = _abi;
  static createInterface(): IAggregatorContractInterface {
    return new utils.Interface(_abi) as IAggregatorContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAggregatorContract {
    return new Contract(address, _abi, signerOrProvider) as IAggregatorContract;
  }
}
